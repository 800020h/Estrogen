plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" } // Create
}

dependencies {
    modImplementation ("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi ("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

    modApi ("dev.architectury:architectury-fabric:${rootProject.architectury_version}")

    //Create
    modImplementation ("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${project.create_version}+mc${rootProject.minecraft_version}") transitive false

    //Porting Lib
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:transfer:${project.porting_lib_version}"))

    //Config
    modImplementation ("dev.isxander.yacl:yet-another-config-lib-fabric:${rootProject.yacl_version}") transitive false

    //Mod Menu
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

    //Mixin Extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}")))

    //Dev Auth
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${rootProject.devauth_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {}
}

loom {
    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=estrogen"

            runDir "build/datagen"
        }
    }
}