plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {}

dependencies {
    forge ("net.minecraftforge:forge:${rootProject.forge_version}")
    modApi ("dev.architectury:architectury-forge:${rootProject.architectury_version}")

    //Create
    modImplementation ("com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_version_forge}:slim") { transitive = false }
    modImplementation ("com.jozufozu.flywheel:flywheel-forge-1.20.1:${rootProject.flywheel_version}")
    modImplementation ("com.tterrag.registrate:Registrate:${project.registrate_version}")

    //Config
    modImplementation ("dev.isxander.yacl:yet-another-config-lib-forge:${rootProject.yacl_version}") transitive false

    //Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))

    //Dev Auth
    modRuntimeOnly("me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}