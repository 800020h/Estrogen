plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {}

dependencies {
    //Forge
    forge ("net.minecraftforge:forge:${project.forge_version}")
    //Architectury
    modApi ("dev.architectury:architectury-forge:${rootProject.architectury_version}")

    //Create
    modImplementation ("com.simibubi.create:create-${minecraft_version}:${project.create_version}:slim") { transitive = false }

    //Registrate
    modImplementation ("com.tterrag.registrate:Registrate:${project.registrate_version}")

    //Flywheel
    modImplementation ("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${project.flywheel_version}")

    //Curios
    modImplementation ("top.theillusivec4.curios:curios-forge:${project.curios_version}")

    //Mixin Extras
    implementation (include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))

    //Dev Auth
    modRuntimeOnly ("me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}")

    //Item Viewers
    //TODO: REI is currently broken on forge, seems like a REI issue, EMI compat seems to be broken on forge, also tags in recipes are broken on forge because of platform difference
    switch (rootProject.item_viewer.toLowerCase()) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-forge:${rootProject.emi_version}"); break
        case "jei": modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${rootProject.item_viewer} must be REI, EMI or disabled"); break
    }

    //Forge stuff
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("-forge")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.file("src/main/resources/estrogen.accesswidener")

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig("estrogen-common.mixins.json")
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}